name: blue-green-deploy

on: [workflow_dispatch]

env:
    AZURE_RESOURCEGROUP_NAME: spring-cloud-demos
    SPRING_CLOUD_SERVICE: sping-cloud-service
    APP_NAME: gateway
    DEFAULT_DEPLOYMENT: default
    NEW_DEPLOYMENT: green

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'zulu'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file piggymetrics/pom.xml -DskipTests
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: jar-files
        path: ./piggymetrics/**/target/**.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      NEWDEPLOYMENT: ${{ steps.deploy.outputs.NEWDEPLOYMENT }}
      ACTIVEDEPLOYMENT: ${{ steps.deploy.outputs.ACTIVEDEPLOYMENT }}
    steps:
    - name: Download jar
      uses: actions/download-artifact@v2
      with:
        name: jar-files
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Azure CLI script
      uses: azure/CLI@v1
      id: deploy
      with:
        azcliversion: latest
        inlineScript: |
          az extension add --name spring-cloud
          az config set defaults.group=${{env.AZURE_RESOURCEGROUP_NAME}}
          az config set defaults.spring-cloud=${{env.SPRING_CLOUD_SERVICE}}
          ACTIVEDEPLOYMENT=$(az spring-cloud app show -s ${{env.SPRING_CLOUD_SERVICE}} -g ${{env.AZURE_RESOURCEGROUP_NAME}} -n ${{env.APP_NAME}} --query properties.activeDeployment.name -o tsv)
          if [ "$ACTIVEDEPLOYMENT" = "${{env.DEFAULT_DEPLOYMENT}}" ]; then
            NEWDEPLOYMENT="${{env.NEW_DEPLOYMENT}}"
          else
            NEWDEPLOYMENT="${{env.DEFAULT_DEPLOYMENT}}"
          fi
          echo 'new deployment: ' $NEWDEPLOYMENT
          echo 'active deployment': $ACTIVEDEPLOYMENT
          echo "::set-output name=NEWDEPLOYMENT::$NEWDEPLOYMENT"
          echo "::set-output name=ACTIVEDEPLOYMENT::$ACTIVEDEPLOYMENT"
          NEWDEPLOYMENTEXISTS=$(az spring-cloud app deployment list -s ${{env.SPRING_CLOUD_SERVICE}} -g ${{env.AZURE_RESOURCEGROUP_NAME}} --app ${{env.APP_NAME}} --query "[?name=='$NEWDEPLOYMENT'].name" -o tsv)
          if [ "$NEWDEPLOYMENTEXISTS" = "$NEWDEPLOYMENT" ]; then
            echo $NEWDEPLOYMENT ' already exists'
          else
            echo 'creating deployment ' $NEWDEPLOYMENT
            az spring-cloud app deployment create --app ${{env.APP_NAME}} -n $NEWDEPLOYMENT
          fi
          az spring-cloud app deploy -n ${{env.APP_NAME}} --jar-path $GITHUB_WORKSPACE/piggymetrics/${{env.APP_NAME}}/target/${{env.APP_NAME}}.jar -d $NEWDEPLOYMENT

  switch-to-production:
    runs-on: ubuntu-latest
    needs: deploy
    environment: Production
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az spring-cloud app set-deployment -d ${{ needs.deploy.outputs.NEWDEPLOYMENT }} -n ${{env.APP_NAME}}
          az spring-cloud app deployment delete --app ${{env.APP_NAME}} -n ${{ needs.deploy.outputs.ACTIVEDEPLOYMENT }}
